package com.ironman.kutils.data.network;import com.google.gson.Gson;import com.google.gson.GsonBuilder;import com.google.gson.TypeAdapter;import com.google.gson.TypeAdapterFactory;import com.google.gson.reflect.TypeToken;import com.google.gson.stream.JsonReader;import com.google.gson.stream.JsonToken;import com.google.gson.stream.JsonWriter;import com.ironman.kutils.BuildConfig;import com.ironman.kutils.data.network.api.GankApi;import com.ironman.kutils.data.network.api.GoldApi;import com.ironman.kutils.data.network.api.WechatApi;import com.ironman.kutils.data.network.api.ZhihuApi;import com.ironman.kutils.data.network.rxJavaCallAdapter.RxJavaCallAdapterFactory;import java.io.IOException;import java.util.concurrent.TimeUnit;import okhttp3.OkHttpClient;import okhttp3.logging.HttpLoggingInterceptor;import retrofit2.Retrofit;import retrofit2.converter.gson.GsonConverterFactory;public class ApiRetrofit {	private static final String TAG = "ApiRetrofit";	private static final int CONNECT_TIMEOUT = 20;	private static final int WRITE_TIMEOUT = 60;	private static final int READ_TIMEOUT = 60;	ZhihuApi zhihuApi;	WechatApi wechatApi;	GankApi gankApi;	GoldApi goldApi;	public Retrofit getRetrofit(String baseUrl) {		/**		 * http log 打印		 */		HttpLoggingInterceptor logInterceptor = new HttpLoggingInterceptor();		if (BuildConfig.DEBUG) {			logInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);		} else {			logInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);		}		OkHttpClient okHttpClient= new OkHttpClient.Builder()				.addInterceptor(logInterceptor)				.connectTimeout(CONNECT_TIMEOUT, TimeUnit.SECONDS)				.writeTimeout(WRITE_TIMEOUT, TimeUnit.SECONDS)				.readTimeout(READ_TIMEOUT, TimeUnit.SECONDS)				.build();		Retrofit retrofit=new Retrofit.Builder()				.baseUrl(baseUrl)				.client(okHttpClient)				.addCallAdapterFactory(RxJavaCallAdapterFactory.create())				.addConverterFactory(GsonConverterFactory.create(getGson()))				.build();		return retrofit;	}	public ZhihuApi getZhihuApi() {		if (zhihuApi == null){			zhihuApi =getRetrofit(ZhihuApi.HOST).create(ZhihuApi.class);		}		return zhihuApi;	}	public WechatApi getWechatApi(){		if (wechatApi == null){			wechatApi = getRetrofit(WechatApi.HOST).create(WechatApi.class);		}		return wechatApi;	}	public GankApi getGankApi(){		if (gankApi == null){			gankApi = getRetrofit(GankApi.HOST).create(GankApi.class);		}		return gankApi;	}	public GoldApi getGoldApi(){		if (goldApi == null){			goldApi = getRetrofit(GoldApi.HOST).create(GoldApi.class);		}		return goldApi;	}	public Gson getGson() {		return new GsonBuilder()				.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")				.registerTypeAdapterFactory(new NullStringToEmptyAdapterFactory())				.create();	}	public static class NullStringToEmptyAdapterFactory<T> implements TypeAdapterFactory {		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {			Class<T> rawType = (Class<T>) type.getRawType();			if (rawType != String.class) {				return null;			}			return (TypeAdapter<T>) new StringAdapter();		}	}	public static class StringAdapter extends TypeAdapter<String> {		public String read(JsonReader reader) throws IOException {			if (reader.peek() == JsonToken.NULL) {				reader.nextNull();				return "";			}			return reader.nextString();		}		public void write(JsonWriter writer, String value) throws IOException {			if (value == null) {				writer.nullValue();				return;			}			writer.value(value);		}	}}